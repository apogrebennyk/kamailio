DB_REDIS Module

Andreas Granig

   <agranig@sipwise.com>

Edited by

Andreas Granig

   <agranig@sipwise.com>

   Copyright Â© 2018 sipwise.com
     __________________________________________________________________

   Table of Contents

   1. Admin Guide

        1. Overview

              1.1. Limitations

        2. Dependencies

              2.1. Kamailio Modules
              2.2. Parameters

                    2.2.1. schema (string)
                    2.2.2. keys (string)

              2.3. External Libraries or Applications

        3. Usage

   List of Examples

   1.1. Setting schema module parameter
   1.2. Setting keys module parameter
   1.3. Usage

Chapter 1. Admin Guide

   Table of Contents

   1. Overview

        1.1. Limitations

   2. Dependencies

        2.1. Kamailio Modules
        2.2. Parameters

              2.2.1. schema (string)
              2.2.2. keys (string)

        2.3. External Libraries or Applications

   3. Usage

1. Overview

   1.1. Limitations

   This module provides a DB APIv1 connector for Redis server.

   It can be used as a replacement for other database modules such as
   db_mysql and db_postgres. Not all the specs of DB APIv1 are
   implemented, thus the usage of this module might be restricted to
   specific modules. Also, for proper performance, the module needs
   particular configuration tailored to the using modules.

   Since Redis does not provide a schema, a schema has to be defined as
   module parameter "schema". The schema definition is composed of a
   semi-column separated list of table definitions in format
   <table-name>=<column-name>/<type>[<column-name>/<type> ...].

   Example:
        version=table_name/string,table_version/int;location=username/string,dom
ain/string,contact/string,received/string,path/string,expires/timestamp,q/double
,callid/string,cseq/int,last_modified/timestamp,flags/int,cflags/int,user_agent/
string,socket/string,methods/int,ruid/string,reg_id/int,instance/string,server_i
d/int,connection_id/int,keepalive/int,partition/int

   Also since Redis is a key-value store with keys having to be unique,
   tables and rows e.g. from MySQL can not be ported 1:1 to Redis. For
   instance, usrloc relies on a key "username@domain", but it must not be
   unique for being able to store multiple contacts per AoR. Thus,
   db_redis supports mapping sets in a way for example for usrloc to have
   a set with a key "username@domain", with its entries being unique keys
   per contact being the ruid of a contact. Thus, one contact in usrloc
   consists of a unique key "location:entry::example-ruid-1" being a hash
   with the columns like username, domain, contact, path etc. In addition,
   this unique key is stored in a set
   "location:usrdom::exampleuser:exampledomain.org". When usrloc does a
   lookup based on "username@domain", db_redis figures out via the
   keys/values the query is constructed by usrloc to look for the final
   entry key in the mapping set first, then querying the actual entries
   from there, avoiding full table scans. For usrloc, the same holds true
   for exipired contacts, requiring a different kind of mapping. There is
   a certain balance of read performance vs. write performance to
   consider, because inserts and deletes also have to maintain the
   mappings, in favor of much faster selects. The mappings can be freely
   defined, so even though other kamailio modules don't require a specific
   mapping to be in place for proper performance, mappings could be
   defined for external applications to read faster (for instance letting
   the acc module also write mappings besides the actual records for
   billing systems to correlate start and stop records faster).

   The mappings can be freely defined in the "keys" module parameter. It
   is composed of a semi-colon separated list of definitions in format
   <table-name>=<entry>:<column-name>[&<map-name>:<column-name>,<column-na
   me>...]

   Example:
        version=entry:table_name;location=entry:ruid&usrdom:username,domain&time
r:partition,keepalive;acc=entry:callid,time_hires&cid:callid

   Note that as of now, you have to have version information in your Redis
   db, similar to your MySQL schema. To insert table versions (e.g. for
   usrloc and acc), execute the following:
        # redis-cli -h $host -n $dbnumber HMSET version:entry::location table_ve
rsion 8
        # redis-cli -h $host -n $dbnumber HMSET version:entry::acc table_version
 5

   You can read more about Redis at: https://www.redis.io.

1.1. Limitations

     * This module has implemented the equivalent operations for INSERT,
       UPDATE, DELETE and SELECT. The ORDER BY for SELECT is not
       implemented. Raw query is not implemented inside this module, use
       db_redis for sending any kind of command to a Redis server.

2. Dependencies

   2.1. Kamailio Modules
   2.2. Parameters

        2.2.1. schema (string)
        2.2.2. keys (string)

   2.3. External Libraries or Applications

2.1. Kamailio Modules

   The following modules must be loaded before this module:
     * none.

2.2. Parameters

2.2.1. schema (string)

   The schema of your tables.

   Example 1.1. Setting schema module parameter
modparam("db_redis", "schema", "version=table_name/string,table_version/int;loca
tion=username/string,domain/string,contact/string,received/string,path/string,ex
pires/timestamp,q/double,callid/string,cseq/int,last_modified/timestamp,flags/in
t,cflags/int,user_agent/string,socket/string,methods/int,ruid/string,reg_id/int,
instance/string,server_id/int,connection_id/int,keepalive/int,partition/int")

2.2.2. keys (string)

   The lookup and mapping keys of your tables.

   Example 1.2. Setting keys module parameter
modparam("db_redis", "keys", "version=entry:table_name;location=entry:ruid&usrdo
m:username,domain&timer:partition,keepalive")

2.3. External Libraries or Applications

   The following libraries or applications must be installed before
   running Kamailio with this module loaded:
     * hiredis - available at https://github.com/redis/hiredis

3. Usage

   Load the module and set the the DB URL for specific modules to:
   redis://[username]@host:port/database. Username is optional. Database
   must be a valid redis database number.

   Example 1.3. Usage
...
loadmodule "db_redis.so"
...
#!define DBURL "redis://127.0.0.1:6379/5"
...
modparam("db_redis", "schema", "version=table_name/string,table_version/int;loca
tion=username/string,domain/string,contact/string,received/string,path/string,ex
pires/timestamp,q/double,callid/string,cseq/int,last_modified/timestamp,flags/in
t,cflags/int,user_agent/string,socket/string,methods/int,ruid/string,reg_id/int,
instance/string,server_id/int,connection_id/int,keepalive/int,partition/int")
modparam("db_redis", "keys", "version=entry:table_name;location=entry:ruid&usrdo
m:username,domain&timer:partition,keepalive")
modparam("usrloc", "db_url", DBURL)
...
